import win32com.client
import re
import pandas as pd
from openpyxl import load_workbook, Workbook
import os
from datetime import datetime, timedelta
import time
import pythoncom
import sys
import logging

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É (–≥–¥–µ –ª–µ–∂–∏—Ç .exe –∏–ª–∏ .py) ===
def get_base_path():
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))

BASE_PATH = get_base_path()

# === ‚ö†Ô∏è –£–ö–ê–ñ–ò –ü–£–¢–¨ –ö –¢–ê–ë–õ–ò–¶–ï –° –î–ê–ù–ù–´–ú–ò ===
TABLE_FILE = r"C:\Users\RULegkiiAn.NESTLESOFT\OneDrive - Nestle Russia & Eurasia\RU DO Warehouses - –æ–±–æ—Ä–æ—Ç –ø–æ–¥–¥–æ–Ω–æ–≤\–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - —É—á–µ—Ç –æ–±–æ—Ä–æ—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤.xlsx"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_file = os.path.join(BASE_PATH, "script.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

SUPPORT_CONTACT = "andrei.legkii@nestle.ru"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OUTLOOK_FOLDER = "Inbox"
SEARCH_SUBJECT = "–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥–¥–æ–Ω–æ–≤ –∏–∑ —Å–µ—Ç–µ–π"
EXCEL_FILE = os.path.join(BASE_PATH, "–≤–æ–∑–≤—Ä–∞—Ç_–ø–æ–¥–¥–æ–Ω–æ–≤.xlsx")
PROCESSED_IDS_FILE = os.path.join(BASE_PATH, "processed_ids.txt")
SHEET_NAME = "–î–∞–Ω–Ω—ã–µ"

WRITE_MODE = "horizontal"  # –∏–ª–∏ "vertical"

# === –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
REMINDER_RECIPIENTS = {
    "x5": ["dma@line7.ru", "slon07@line7.ru", "rudcekb@nestlesoft.net"],
    "—Ç–∞–Ω–¥–µ—Ä": ["rudcekb@nestlesoft.net"],
    "–¥–∏—Å—Ç—Ä—ã": ["rudcekb@nestlesoft.net"]
}

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
_table_cache = None
_table_cache_time = None
sent_reminders = set()
_processed_ids = set()


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ ===
def set_console_title(title):
    try:
        import ctypes
        ctypes.windll.kernel32.SetConsoleTitleW(title)
    except Exception as e:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å–æ–ª–∏: {e}")


# === –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –∏–∑ —Ñ–∞–π–ª–∞ ===
def load_processed_ids():
    global _processed_ids
    if not os.path.exists(PROCESSED_IDS_FILE):
        return set()
    try:
        with open(PROCESSED_IDS_FILE, "r", encoding="utf-8") as f:
            _processed_ids = set(line.strip() for line in f if line.strip())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ processed_ids: {e}")
    return _processed_ids


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –≤ —Ñ–∞–π–ª ===
def save_processed_ids(ids):
    try:
        with open(PROCESSED_IDS_FILE, "w", encoding="utf-8") as f:
            for item_id in ids:
                f.write(item_id + "\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è processed_ids: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–∏—Å—å–º–æ —É–∂–µ –≤ Excel (–ø–æ EntryID) ===
def is_email_in_excel(entry_id):
    if not os.path.exists(EXCEL_FILE):
        return False
    try:
        df = pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME)
        if "EntryID" in df.columns and entry_id in df["EntryID"].values:
            return True
    except Exception as e:
        logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Excel: {e}")
    return False


# === üîπ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ –ø–∏—Å—å–º–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞—Ç—ã –∏–∑ —Ç–µ–ª–∞ ===
def parse_email(body, received_time):
    try:
        lines = body.splitlines()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è
        default_date_str = received_time.strftime("%Y-%m-%d %H:%M")
        data = {
            "–î–∞—Ç–∞ –ø–∏—Å—å–º–∞": default_date_str,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
            "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞": None,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–∞—Ç—ã –∏–∑ —Ç–µ–ª–∞
            "–°–µ—Ç—å": "",
            "–†–¶": "",  # <<< –°–æ—Ö—Ä–∞–Ω—è–µ–º –†–¶ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ –ø–∏—Å—å–º–µ
            "–¢—è–≥–∞—á": "",
            "–ü—Ä–∏—Ü–µ–ø": "",
            "–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è": "",
            "–ü–∞—Å–ø–æ—Ä—Ç": "",
            "–ù–æ–º–µ—Ä –í–£": "",
            "–¢–µ–ª–µ—Ñ–æ–Ω": "",
            "–ò–ù–ù": "",
            "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "",
            "EntryID": ""
        }

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # === –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ ===
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "–î–∞—Ç–∞ 11.10.2025 –≤–æ–∑–≤—Ä–∞—Ç"
            if line.startswith("–î–∞—Ç–∞") and "–≤–æ–∑–≤—Ä–∞—Ç" in line.lower():
                # –ü—Ä–∏–º–µ—Ä: "–î–∞—Ç–∞ 11.10.2025 –≤–æ–∑–≤—Ä–∞—Ç"
                parts = line.split(" ")
                if len(parts) >= 2:
                    date_part = parts[1]  # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç ("11.10.2025")
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç date
                        dt_obj = datetime.strptime(date_part, "%d.%m.%Y").date()
                        data["–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞"] = dt_obj
                        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º "–î–∞—Ç–∞ –ø–∏—Å—å–º–∞" —Ç–æ–ª—å–∫–æ –¥–∞—Ç–æ–π –∏–∑ –ø–∏—Å—å–º–∞ (–≤—Ä–µ–º—è –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è)
                        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–î–∞—Ç–∞ –ø–∏—Å—å–º–∞" –∫–∞–∫ –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
                        combined_dt = dt_obj.strftime("%Y-%m-%d") + " " + received_time.strftime("%H:%M")
                        data["–î–∞—Ç–∞ –ø–∏—Å—å–º–∞"] = combined_dt
                        logging.debug(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ç–µ–ª–µ –ø–∏—Å—å–º–∞: {date_part} -> {dt_obj}")
                    except ValueError:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: '{line}'")

            elif line.startswith("–°–µ—Ç—å"):
                parts = [p.strip() for p in line.split("|")]
                if len(parts) >= 2:
                    data["–°–µ—Ç—å"] = parts[1]
                if len(parts) >= 3:
                    # <<< –°–û–•–†–ê–ù–Ø–ï–ú –†–¶ –ö–ê–ö –ï–°–¢–¨, –ë–ï–ó –û–ë–†–ï–ó–ê–ù–ò–Ø "–†–¶" >>>
                    data["–†–¶"] = parts[2].strip()  # parts[2] —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–†–¶ –¢—é–º–µ–Ω—å"
            elif line.startswith("–¢—è–≥–∞—á"):
                data["–¢—è–≥–∞—á"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ü—Ä–∏—Ü–µ–ø"):
                data["–ü—Ä–∏—Ü–µ–ø"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–§.–ò.–û. –≤–æ–¥–∏—Ç–µ–ª—è"):
                data["–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ü–∞—Å–ø–æ—Ä—Ç"):
                data["–ü–∞—Å–ø–æ—Ä—Ç"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ù–æ–º–µ—Ä –í–£"):
                data["–ù–æ–º–µ—Ä –í–£"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–¢–µ–ª–µ—Ñ–æ–Ω"):
                data["–¢–µ–ª–µ—Ñ–æ–Ω"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ò–ù–ù"):
                data["–ò–ù–ù"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                data["–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"] = line.split(":", 1)[1].strip() if ":" in line else ""

        return data

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: {e}")
        return None


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
def send_email(subject, body, to, cc=None):
    try:
        outlook_app = win32com.client.Dispatch("Outlook.Application")
        mail = outlook_app.CreateItem(0)
        mail.Subject = subject
        if isinstance(to, list):
            mail.To = ";".join(to)
        else:
            mail.To = to
        if cc:
            mail.CC = cc
        mail.Body = body
        mail.Send()
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subject} -> {to}")
        del mail
        del outlook_app
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")


# === üîπ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É) ===
def update_table_row(data, target_date, target_rc):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ TABLE_FILE (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - —É—á–µ—Ç –æ–±–æ—Ä–æ—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤.xlsx)
    –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –¥–∞—Ç—ã –∏ –†–¶.
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ "–≤–æ–¥–∏—Ç–µ–ª—å –§–∞–º–∏–ª–∏—è –ò.–û." –∏ "–Ω–æ–º–µ—Ä –∞–º".
    """
    logging.debug(f"üîç update_table_row: –ù–∞—á–∞–ª–æ. –ò—â–µ–º –¥–∞—Ç—É {target_date}, –†–¶ '{target_rc}'")
    try:
        if not os.path.exists(TABLE_FILE):
            logging.warning(f"–§–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {TABLE_FILE}")
            return False

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–Ω–∏–≥—É
        logging.debug(f"üìÇ update_table_row: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã: {TABLE_FILE}")
        book = load_workbook(TABLE_FILE, keep_vba=False)
        if "–ø—Ä–∏—Ö–æ–¥" not in book.sheetnames:
            logging.error("–õ–∏—Å—Ç '–ø—Ä–∏—Ö–æ–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ!")
            return False

        sheet = book["–ø—Ä–∏—Ö–æ–¥"]

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
        headers_raw = [cell.value for cell in sheet[1]]
        headers = []
        for h in headers_raw:
            if h is None:
                headers.append("")
            else:
                headers.append(str(h).strip())

        logging.debug(f"üìã update_table_row: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")

        # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        date_col_idx = None
        rc_col_idx = None
        driver_col_idx = None
        tractor_col_idx = None
        # supplier_col_idx = None  # –£–ë–†–ê–ù–û

        for i, header_text in enumerate(headers):
            # –°—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã
            if header_text.lower() == "–¥–∞—Ç–∞":
                date_col_idx = i + 1  # openpyxl –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
            # –°—Ç–æ–ª–±–µ—Ü –†–¶ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏)
            elif "—Ä—Ü" in header_text.lower() and "(–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞)" in header_text.lower():
                rc_col_idx = i + 1
            # –°—Ç–æ–ª–±–µ—Ü –≤–æ–¥–∏—Ç–µ–ª—è
            elif "–≤–æ–¥–∏—Ç–µ–ª—å" in header_text.lower() and "—Ñ–∞–º–∏–ª–∏—è" in header_text.lower():
                driver_col_idx = i + 1
            # –°—Ç–æ–ª–±–µ—Ü –Ω–æ–º–µ—Ä–∞ –∞/–º
            elif header_text.lower() == "–Ω–æ–º–µ—Ä –∞–º":
                tractor_col_idx = i + 1
            # supplier_col_idx –Ω–µ –∏—â–µ–º  # –£–ë–†–ê–ù–û

        logging.debug(f"üìä update_table_row: –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤: –¥–∞—Ç–∞={date_col_idx}, –†–¶={rc_col_idx}, –≤–æ–¥–∏—Ç–µ–ª—å={driver_col_idx}, –Ω–æ–º–µ—Ä –∞–º={tractor_col_idx}")

        missing_cols = []
        if date_col_idx is None:
            missing_cols.append("–¥–∞—Ç–∞")
        if rc_col_idx is None:
            missing_cols.append("–†–¶ (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞)")
        if driver_col_idx is None:
            missing_cols.append("–≤–æ–¥–∏—Ç–µ–ª—å –§–∞–º–∏–ª–∏—è –ò.–û.")
        if tractor_col_idx is None:
            missing_cols.append("–Ω–æ–º–µ—Ä –∞–º")

        if missing_cols:
            logging.error(f"‚ùå update_table_row: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ: {', '.join(missing_cols)}")
            return False

        # === üîç –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –¥–∞—Ç–æ–π –∏ –†–¶ ===
        found_row = None
        logging.debug(f"üîé update_table_row: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞—Ç–æ–π {target_date} –∏ –†–¶ '{target_rc}'...")
        for row_num, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
            cell_date_value = sheet.cell(row=row_num, column=date_col_idx).value
            if cell_date_value is None:
                continue

            try:
                if isinstance(cell_date_value, str):
                    if "." in cell_date_value:
                        cell_date_obj = datetime.strptime(cell_date_value, "%d.%m.%Y").date()
                    else:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–µ –ø–æ–¥–æ—à—ë–ª
                         cell_date_obj = datetime.strptime(cell_date_value, "%Y-%m-%d").date()
                else:
                    cell_date_obj = cell_date_value.date()
            except Exception as date_parse_error:
                 logging.debug(f"  ‚ö†Ô∏è update_table_row: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{cell_date_value}' –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {date_parse_error}")
                 continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É

            if cell_date_obj != target_date:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–¶
            cell_rc_value = sheet.cell(row=row_num, column=rc_col_idx).value
            if cell_rc_value is not None and str(cell_rc_value).strip() == target_rc:
                found_row = row_num
                logging.debug(f"  ‚úÖ update_table_row: –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {found_row} —Å —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π –¥–∞—Ç–æ–π –∏ –†–¶.")
                break  # –ù–∞—à–ª–∏ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É

        if found_row is None:
            logging.info(f"‚ÑπÔ∏è update_table_row: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π {target_date} –∏ –†–¶ '{target_rc}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —è—á–µ–π–∫–∏ –ø—É—Å—Ç—ã–µ
        updated = False

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver_cell = sheet.cell(row=found_row, column=driver_col_idx)
        driver_from_email = data.get("–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è", "").strip()
        if driver_from_email:
            current_driver = driver_cell.value
            if not current_driver or str(current_driver).strip().lower() in ("", "nan"):
                sheet.cell(row=found_row, column=driver_col_idx, value=driver_from_email)
                updated = True
                logging.info(f"‚úÖ update_table_row: –û–±–Ω–æ–≤–ª—ë–Ω –≤–æ–¥–∏—Ç–µ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ {found_row}: '{driver_from_email}'")
            else:
                 logging.debug(f"‚ÑπÔ∏è update_table_row: –í–æ–¥–∏—Ç–µ–ª—å –≤ —Å—Ç—Ä–æ–∫–µ {found_row} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ('{current_driver}'). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞/–º (—Ç—è–≥–∞—á)
        tractor_cell = sheet.cell(row=found_row, column=tractor_col_idx)
        tractor_from_email = data.get("–¢—è–≥–∞—á", "").strip()
        if tractor_from_email:
            current_tractor = tractor_cell.value
            if not current_tractor or str(current_tractor).strip().lower() in ("", "nan"):
                sheet.cell(row=found_row, column=tractor_col_idx, value=tractor_from_email)
                updated = True
                logging.info(f"‚úÖ update_table_row: –û–±–Ω–æ–≤–ª—ë–Ω –Ω–æ–º–µ—Ä –∞/–º –≤ —Å—Ç—Ä–æ–∫–µ {found_row}: '{tractor_from_email}'")
            else:
                 logging.debug(f"‚ÑπÔ∏è update_table_row: –ù–æ–º–µ—Ä –∞/–º –≤ —Å—Ç—Ä–æ–∫–µ {found_row} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ('{current_tractor}'). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

        if updated:
            try:
                book.save(TABLE_FILE)
                logging.info(f"üíæ update_table_row: –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —Å—Ç—Ä–æ–∫–∞ {found_row}")
            except PermissionError:
                logging.error(f"‚ùå update_table_row: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É —Ç–∞–±–ª–∏—Ü—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –æ—Ç–∫—Ä—ã—Ç –≤ Excel: {TABLE_FILE}")
                return False  # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ—É–¥–∞—á–∞, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            except Exception as save_error:
                 logging.error(f"‚ùå update_table_row: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {save_error}")
                 return False
        else:
            logging.info(f"‚ÑπÔ∏è update_table_row: –°—Ç—Ä–æ–∫–∞ {found_row} —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è/—Ç—è–≥–∞—á–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        return True

    except Exception as e:
        logging.error(f"‚ùå update_table_row: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å—É ===
def check_and_send_reminders(data, entry_id):
    global sent_reminders

    try:
        network = data.get("–°–µ—Ç—å", "").lower().strip()
        if not network:
            return

        if "–ª–µ–Ω—Ç–∞" in network:
            logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –õ–µ–Ω—Ç—É ‚Äî –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç.")
            return

        # === –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–∏—Å—å–º–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
        return_date_obj = data.get("–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞")
        if not return_date_obj:
            # fallback –Ω–∞ –¥–∞—Ç—É –∏–∑ "–î–∞—Ç–∞ –ø–∏—Å—å–º–∞" –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é
            try:
                return_date_str = data.get("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞", "")[:10]
                return_date_obj = datetime.strptime(return_date_str, "%Y-%m-%d").date()
            except:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {data.get('–î–∞—Ç–∞ –ø–∏—Å—å–º–∞', '')}")
                return

        rc_from_email = data.get("–†–¶", "").strip()
        today = datetime.today().date()
        current_time = datetime.now().strftime("%H:%M")

        # === –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –≤–æ–¥–∏—Ç–µ–ª—è ===
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Å—Ç—Ä–æ–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∏—Å—å–º–∞.
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É.
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –§–ò–û –ø—É—Å—Ç–æ–µ.
        has_driver_in_table_simulation = bool(data.get("–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è", "").strip())

        # === X5 –∏ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã ===
        if "x5" in network or "–¥–∏—Å—Ç—Ä" in network:
            if today == return_date_obj:
                if current_time == "12:00" and not has_driver_in_table_simulation:
                    key = (entry_id, "need_data")
                    if key not in sent_reminders:
                        subject = f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({network.upper()}): –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –†–¶ {rc_from_email}"
                        body = (
                            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date_obj.strftime('%d.%m.%Y')}\n"
                            f"–°–µ—Ç—å: {data.get('–°–µ—Ç—å', '')}\n"
                            f"–†–¶: {rc_from_email}\n\n"
                            f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞.\n"
                            f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                        )
                        recipients = REMINDER_RECIPIENTS.get("x5" if "x5" in network else "–¥–∏—Å—Ç—Ä—ã")
                        send_email(subject, body, recipients)
                        sent_reminders.add(key)
                        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {network} ‚Üí {recipients}")

                if current_time.endswith(":00") and has_driver_in_table_simulation:
                    key = (entry_id, f"check_pass_{current_time}")
                    if key not in sent_reminders:
                        subject = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ({network.upper()}): –∑–∞–∫–∞–∑–∞–Ω –ª–∏ –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ –†–¶ {rc_from_email}?"
                        body = (
                            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date_obj.strftime('%d.%m.%Y')}\n"
                            f"–°–µ—Ç—å: {data.get('–°–µ—Ç—å', '')}\n"
                            f"–†–¶: {rc_from_email}\n\n"
                            f"–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞.\n"
                            f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                        )
                        recipients = REMINDER_RECIPIENTS.get("x5" if "x5" in network else "–¥–∏—Å—Ç—Ä—ã")
                        send_email(subject, body, recipients)
                        sent_reminders.add(key)
                        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è {network} ‚Üí {recipients}")

        # === –¢–∞–Ω–¥–µ—Ä ===
        elif "—Ç–∞–Ω–¥–µ—Ä" in network:
            if return_date_obj.weekday() in (5, 6, 0):  # –°–±, –í—Å, –ü–Ω
                days_back = (return_date_obj.weekday() - 4) % 7
                if days_back == 0:
                    days_back = 7
                reminder_date = return_date_obj - timedelta(days=days_back)
            else:
                reminder_date = return_date_obj - timedelta(days=1)

            if today == reminder_date and current_time == "14:00":
                if not has_driver_in_table_simulation:  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
                    key = (entry_id, "tander_need_data")
                    if key not in sent_reminders:
                        subject = f"–¢–ê–ù–î–ï–†: —Å—Ä–æ—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –†–¶ {rc_from_email}"
                        body = (
                            f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date_obj.strftime('%d.%m.%Y')}\n"
                            f"–°–µ—Ç—å: {data.get('–°–µ—Ç—å', '')}\n"
                            f"–†–¶: {rc_from_email}\n\n"
                            f"–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á—ë—Ç–∞.\n"
                            f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                        )
                        recipients = REMINDER_RECIPIENTS["—Ç–∞–Ω–¥–µ—Ä"]
                        send_email(subject, body, recipients)
                        sent_reminders.add(key)
                        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¢–∞–Ω–¥–µ—Ä ‚Üí {recipients}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_and_send_reminders: {e}")


# === –ó–∞–ø–∏—Å—å –≤ Excel: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ===
def write_vertical_to_excel(data, sheet_name, excel_file):
    try:
        if not os.path.exists(excel_file):
            wb = Workbook()
            ws = wb.active
            ws.title = sheet_name
            ws.append(["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "EntryID"])
            wb.save(excel_file)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª Excel (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π): {excel_file}")

        book = load_workbook(excel_file)

        if sheet_name not in book.sheetnames:
            ws = book.create_sheet(sheet_name)
            ws.append(["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "EntryID"])
        else:
            ws = book[sheet_name]

        startrow = ws.max_row + 1

        ws.cell(row=startrow, column=1, value=f"=== –ü–∏—Å—å–º–æ –æ—Ç {data['–î–∞—Ç–∞ –ø–∏—Å—å–º–∞']} ===")
        ws.cell(row=startrow, column=3, value=data["EntryID"])
        startrow += 1

        for key, value in data.items():
            if key == "EntryID":
                continue
            ws.cell(row=startrow, column=1, value=key)
            ws.cell(row=startrow, column=2, value=value)
            ws.cell(row=startrow, column=3, value=data["EntryID"])
            startrow += 1

        book.save(excel_file)
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Excel (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Excel (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ): {e}")


# === –ó–∞–ø–∏—Å—å –≤ Excel: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ===
def write_horizontal_to_excel(data, sheet_name, excel_file):
    try:
        df_new = pd.DataFrame([data])

        if not os.path.exists(EXCEL_FILE):
            df_new.to_excel(EXCEL_FILE, sheet_name=sheet_name, index=False)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª Excel (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π): {excel_file}")
        else:
            book = load_workbook(EXCEL_FILE)

            if sheet_name not in book.sheetnames:
                with pd.ExcelWriter(EXCEL_FILE, engine="openpyxl", mode="a") as writer:
                    df_new.to_excel(writer, sheet_name=sheet_name, index=False)
                logging.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            else:
                startrow = book[SHEET_NAME].max_row
                with pd.ExcelWriter(EXCEL_FILE, engine="openpyxl", mode="a", if_sheet_exists="overlay") as writer:
                    df_new.to_excel(writer, sheet_name=SHEET_NAME, index=False, header=False, startrow=startrow)
                logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–ø–∏—Å–∞–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Excel (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ): {e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ ===
def handle_mail(item, processed_ids):
    global _processed_ids
    try:
        entry_id = item.EntryID
        subject = item.Subject
        received_time = item.ReceivedTime
        received_time_str = received_time.strftime("%Y-%m-%d %H:%M")

        logging.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å—å–º–∞: {subject} | ID: {entry_id}")

        if entry_id in processed_ids:
            logging.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: —É–∂–µ –≤ processed_ids")
            return

        if is_email_in_excel(entry_id):
            logging.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: —É–∂–µ –µ—Å—Ç—å –≤ Excel")
            processed_ids.add(entry_id)
            save_processed_ids(processed_ids)
            return

        if not subject or SEARCH_SUBJECT.lower() not in str(subject).lower():
            logging.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: —Ç–µ–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '{SEARCH_SUBJECT}' (—Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞: '{subject}')")
            return

        body = item.Body
        del item

        data = parse_email(body, received_time)
        if not data:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∏—Å—å–º–æ")
            processed_ids.add(entry_id)
            save_processed_ids(processed_ids)
            return

        data["EntryID"] = entry_id
        logging.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {data}")

        # === üîπ –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ê–ë–õ–ò–¶–£ –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –î–ê–¢–û–ô ===
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –ò–ó –ü–ò–°–¨–ú–ê –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
            target_date = data.get("–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞")
            if not target_date:
                 # fallback –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–ª–µ
                 try:
                     fallback_date_str = data.get("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞", "")[:10]
                     target_date = datetime.strptime(fallback_date_str, "%Y-%m-%d").date()
                     logging.debug(f"üìÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ '–î–∞—Ç–∞ –ø–∏—Å—å–º–∞' –∫–∞–∫ fallback: {target_date}")
                 except:
                     logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–∂–µ –∏–∑ '–î–∞—Ç–∞ –ø–∏—Å—å–º–∞'.")
                     target_date = None

            target_rc = data.get("–†–¶", "").strip()

            if target_date and target_rc:
                success = update_table_row(data, target_date, target_rc)
                if success:
                    logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.")
                else:
                    logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏–ª–∏ –†–¶ –∏–∑ –ø–∏—Å—å–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")
        # ===========================

        if WRITE_MODE == "vertical":
            write_vertical_to_excel(data, SHEET_NAME, EXCEL_FILE)
            logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –≤ Excel")
        else:
            write_horizontal_to_excel(data, SHEET_NAME, EXCEL_FILE)
            logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –≤ Excel")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É
        check_and_send_reminders(data, entry_id)

        processed_ids.add(entry_id)
        save_processed_ids(processed_ids)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
    finally:
        if 'item' in locals():
            del item


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
def monitor_inbox():
    pythoncom.CoInitialize()
    outlook = None
    namespace = None
    inbox = None
    folder = None

    processed_ids = load_processed_ids()
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_ids)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –∏–∑ —Ñ–∞–π–ª–∞.")

    try:
        outlook = win32com.client.Dispatch("Outlook.Application")
        namespace = outlook.GetNamespace("MAPI")
        inbox = namespace.GetDefaultFolder(6)
        folder = inbox.Folders[OUTLOOK_FOLDER] if OUTLOOK_FOLDER.lower() != "inbox" else inbox

        logging.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏: {WRITE_MODE.upper()}.")
        logging.info(f"üìÇ –ü–∞–ø–∫–∞: {OUTLOOK_FOLDER}")
        logging.info(f"üì¨ –ò—â–µ–º –ø–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞): '{SEARCH_SUBJECT}'")

        time.sleep(5)

        while True:
            try:
                today = datetime.today().date()
                min_date = today - timedelta(days=7)

                messages = folder.Items
                messages.Sort("[ReceivedTime]", True)

                msg_list = []
                logging.info("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∏—Å—å–º–∞...")

                for msg in messages:
                    try:
                        msg_class = getattr(msg, 'Class', None)
                        if msg_class != 43:
                            continue
                        if not getattr(msg, 'ReceivedTime', None):
                            continue
                        if msg.ReceivedTime.date() < min_date:
                            break
                        msg_list.append(msg)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∏—Å—å–º–∞: {e}")
                        continue

                logging.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(msg_list)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

                for msg in msg_list:
                    handle_mail(msg, processed_ids)
                    del msg

                del msg_list

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

            logging.info("‚è≥ –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...\n")
            time.sleep(60)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Outlook: {e}")
    finally:
        for obj in [folder, inbox, namespace, outlook]:
            if obj:
                del obj
        pythoncom.CoUninitialize()


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    try:
        set_console_title("üì¶ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤")
        logging.info("=" * 50)
        logging.info("  üì¶ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤")
        logging.info(f"  üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_CONTACT}")
        logging.info("=" * 50)
        logging.info("")
        monitor_inbox()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è...")
