import win32com.client
import re
import pandas as pd
from openpyxl import load_workbook, Workbook
import os
from datetime import datetime, timedelta, time, timezone
import time as time_module
import pythoncom
import sys
import logging

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É ===
def get_base_path():
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))

BASE_PATH = get_base_path()

# === –ü–£–¢–¨ –ö –¢–ê–ë–õ–ò–¶–ï –° –î–ê–ù–ù–´–ú–ò ===
TABLE_FILE = r"C:\Users\RULegkiiAn.NESTLESOFT\OneDrive - Nestle Russia & Eurasia\RU DO Warehouses - –æ–±–æ—Ä–æ—Ç –ø–æ–¥–¥–æ–Ω–æ–≤\–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - —É—á–µ—Ç –æ–±–æ—Ä–æ—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤.xlsx"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
log_file = os.path.join(BASE_PATH, "script.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

SUPPORT_CONTACT = "andrei.legkii@nestle.ru"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OUTLOOK_FOLDER = "Inbox"
SEARCH_SUBJECT = "–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥–¥–æ–Ω–æ–≤ –∏–∑ —Å–µ—Ç–µ–π"
EXCEL_FILE = os.path.join(BASE_PATH, "–≤–æ–∑–≤—Ä–∞—Ç_–ø–æ–¥–¥–æ–Ω–æ–≤.xlsx")
PROCESSED_IDS_FILE = os.path.join(BASE_PATH, "processed_ids.txt")
SHEET_NAME = "–î–∞–Ω–Ω—ã–µ"
WRITE_MODE = "horizontal"

# === –ü–û–õ–£–ß–ê–¢–ï–õ–ò –ò –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===
REMINDER_RECIPIENTS = {
    "–•5": ["dma@line7.ru", "slon07@line7.ru", "rudcekb@nestlesoft.net"],
    "–¢–∞–Ω–¥–µ—Ä": ["rudcekb@nestlesoft.net"],
    "–¥–∏—Å—Ç—Ä—ã": ["rudcekb@nestlesoft.net"]
}
SENDER_EMAIL = "andrei.legkii@nestle.ru"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º –∞–¥—Ä–µ—Å

# === –§–õ–ê–ì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–ø–æ—Å—Ç–∞–≤—å—Ç–µ False –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞) ===
TEST_MODE = False  # True ‚Äî –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, False ‚Äî –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
TEST_HOUR = 16    # –ß–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∞ (12 –∏–ª–∏ 14)
TEST_MINUTE = 2   # –ú–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
sent_reminders = set()
_processed_ids = set()


def set_console_title(title):
    try:
        import ctypes
        ctypes.windll.kernel32.SetConsoleTitleW(title)
    except Exception as e:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å–æ–ª–∏: {e}")


def load_processed_ids():
    global _processed_ids
    if not os.path.exists(PROCESSED_IDS_FILE):
        return set()
    try:
        with open(PROCESSED_IDS_FILE, "r", encoding="utf-8") as f:
            _processed_ids = set(line.strip() for line in f if line.strip())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ processed_ids: {e}")
    return _processed_ids


def save_processed_ids(ids):
    try:
        with open(PROCESSED_IDS_FILE, "w", encoding="utf-8") as f:
            for item_id in ids:
                f.write(item_id + "\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è processed_ids: {e}")


def is_email_in_excel(entry_id):
    if not os.path.exists(EXCEL_FILE):
        return False
    try:
        df = pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME)
        if "EntryID" in df.columns and entry_id in df["EntryID"].values:
            return True
    except Exception as e:
        logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Excel: {e}")
    return False


def parse_email(body, received_time):
    try:
        lines = body.splitlines()
        default_date_str = received_time.strftime("%Y-%m-%d %H:%M")
        data = {
            "–î–∞—Ç–∞ –ø–∏—Å—å–º–∞": default_date_str,
            "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞": None,
            "–°–µ—Ç—å": "",
            "–†–¶": "",
            "–¢—è–≥–∞—á": "",
            "–ü—Ä–∏—Ü–µ–ø": "",
            "–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è": "",
            "–ü–∞—Å–ø–æ—Ä—Ç": "",
            "–ù–æ–º–µ—Ä –í–£": "",
            "–¢–µ–ª–µ—Ñ–æ–Ω": "",
            "–ò–ù–ù": "",
            "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "",
            "EntryID": ""
        }

        for line in lines:
            line = line.strip()
            if not line:
                continue

            if line.startswith("–î–∞—Ç–∞") and "–≤–æ–∑–≤—Ä–∞—Ç" in line.lower():
                parts = line.split(" ")
                if len(parts) >= 2:
                    date_part = parts[1]
                    try:
                        dt_obj = datetime.strptime(date_part, "%d.%m.%Y").date()
                        data["–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞"] = dt_obj
                        combined_dt = dt_obj.strftime("%Y-%m-%d") + " " + received_time.strftime("%H:%M")
                        data["–î–∞—Ç–∞ –ø–∏—Å—å–º–∞"] = combined_dt
                        logging.debug(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {date_part}")
                    except ValueError:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: '{line}'")

            elif line.startswith("–°–µ—Ç—å"):
                parts = [p.strip() for p in line.split("|")]
                if len(parts) >= 2:
                    data["–°–µ—Ç—å"] = parts[1]
                if len(parts) >= 3:
                    data["–†–¶"] = parts[2].strip()
            elif line.startswith("–¢—è–≥–∞—á"):
                data["–¢—è–≥–∞—á"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ü—Ä–∏—Ü–µ–ø"):
                data["–ü—Ä–∏—Ü–µ–ø"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–§.–ò.–û. –≤–æ–¥–∏—Ç–µ–ª—è"):
                data["–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ü–∞—Å–ø–æ—Ä—Ç"):
                data["–ü–∞—Å–ø–æ—Ä—Ç"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ù–æ–º–µ—Ä –í–£"):
                data["–ù–æ–º–µ—Ä –í–£"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–¢–µ–ª–µ—Ñ–æ–Ω"):
                data["–¢–µ–ª–µ—Ñ–æ–Ω"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ò–ù–ù"):
                data["–ò–ù–ù"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                data["–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"] = line.split(":", 1)[1].strip() if ":" in line else ""

        return data

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: {e}")
        return None


def send_email(subject, body, to):
    try:
        outlook_app = win32com.client.Dispatch("Outlook.Application")

        mail = outlook_app.CreateItem(0)

        # === –ù–ê–°–¢–†–û–ô–ö–ê –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø ===
        accounts = outlook_app.Session.Accounts
        sender_account = None
        for account in accounts:
            if account.SmtpAddress == SENDER_EMAIL:
                sender_account = account
                break
        if sender_account:
            mail.SendUsingAccount = sender_account
            logging.debug(f"üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç: {SENDER_EMAIL}")
        else:
            logging.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —Å –∞–¥—Ä–µ—Å–æ–º {SENDER_EMAIL} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Outlook. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π.")
        # === /–ù–ê–°–¢–†–û–ô–ö–ê –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø ===

        mail.Subject = subject
        if isinstance(to, list):
            mail.To = ";".join(to)
        else:
            mail.To = to
        mail.Body = body
        mail.Send()
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subject} -> {to} –æ—Ç {SENDER_EMAIL}")
        del mail
        del outlook_app
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")


def update_table_row(data, target_date, target_rc):
    logging.debug(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: –¥–∞—Ç–∞={target_date}, –†–¶='{target_rc}'")
    try:
        if not os.path.exists(TABLE_FILE):
            logging.warning(f"–§–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {TABLE_FILE}")
            return False

        book = load_workbook(TABLE_FILE, keep_vba=False)
        if "–ø—Ä–∏—Ö–æ–¥" not in book.sheetnames:
            logging.error("–õ–∏—Å—Ç '–ø—Ä–∏—Ö–æ–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False

        sheet = book["–ø—Ä–∏—Ö–æ–¥"]
        headers = [str(cell.value).strip() if cell.value else "" for cell in sheet[1]]

        date_col_idx = rc_col_idx = driver_col_idx = tractor_col_idx = None
        for i, h in enumerate(headers):
            if h.lower() == "–¥–∞—Ç–∞":
                date_col_idx = i + 1
            elif "—Ä—Ü" in h.lower() and "(–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞)" in h.lower():
                rc_col_idx = i + 1
            elif "–≤–æ–¥–∏—Ç–µ–ª—å" in h.lower() and "—Ñ–∞–º–∏–ª–∏—è" in h.lower():
                driver_col_idx = i + 1
            elif h.lower() == "–Ω–æ–º–µ—Ä –∞–º":
                tractor_col_idx = i + 1

        missing = [col for col, name in [("–¥–∞—Ç–∞", date_col_idx), ("–†–¶", rc_col_idx), ("–≤–æ–¥–∏—Ç–µ–ª—å", driver_col_idx), ("–Ω–æ–º–µ—Ä –∞–º", tractor_col_idx)] if name is None]
        if missing:
            logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing)}")
            return False

        found_row = None
        for row_num in range(2, sheet.max_row + 1):
            cell_date = sheet.cell(row=row_num, column=date_col_idx).value
            if cell_date is None:
                continue
            try:
                if isinstance(cell_date, str):
                    parsed = datetime.strptime(cell_date, "%d.%m.%Y").date() if "." in cell_date else datetime.strptime(cell_date, "%Y-%m-%d").date()
                else:
                    parsed = cell_date.date()
            except:
                continue
            if parsed == target_date and str(sheet.cell(row=row_num, column=rc_col_idx).value).strip() == target_rc:
                found_row = row_num
                break

        if not found_row:
            logging.info("–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return False

        updated = False
        for col_idx, key in [(driver_col_idx, "–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è"), (tractor_col_idx, "–¢—è–≥–∞—á")]:
            val = data.get(key, "").strip()
            if val:
                cell = sheet.cell(row=found_row, column=col_idx)
                if not cell.value or str(cell.value).strip().lower() in ("", "nan"):
                    cell.value = val
                    updated = True
                    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {key} = {val}")

        if updated:
            book.save(TABLE_FILE)
            logging.info("üíæ –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False


# üî• –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –ü–û–õ–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú –ò –¢–ï–°–¢–û–í–´–ú –†–ï–ñ–ò–ú–û–ú
def check_reminders_from_table():
    global sent_reminders

    try:
        logging.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        if not os.path.exists(TABLE_FILE):
            logging.error("‚ùå –§–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return

        # === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò (—Ä–µ–∞–ª—å–Ω–æ–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ) ===
        if TEST_MODE:
            now_msk = datetime.now().replace(hour=TEST_HOUR, minute=TEST_MINUTE, second=0, microsecond=0)
            logging.info(f"üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è {now_msk.strftime('%H:%M:%S')}")
        else:
            moscow_tz = timezone(timedelta(hours=3))
            now_msk = datetime.now(moscow_tz)
            logging.info(f"üåç –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø: {now_msk.strftime('%H:%M:%S')} –ø–æ –ú–°–ö")

        today_msk = now_msk.date()
        current_time_msk = now_msk.time()

        book = load_workbook(TABLE_FILE, read_only=True, data_only=True)
        if "–ø—Ä–∏—Ö–æ–¥" not in book.sheetnames:
            logging.error("‚ùå –õ–∏—Å—Ç '–ø—Ä–∏—Ö–æ–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
            book.close()
            return

        sheet = book["–ø—Ä–∏—Ö–æ–¥"]
        headers = [str(cell.value).strip() if cell.value else "" for cell in sheet[1]]

        logging.debug(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: {headers}")

        col_map = {}
        for i, h in enumerate(headers):
            if h.lower() == "–¥–∞—Ç–∞":
                col_map["–¥–∞—Ç–∞"] = i
            elif "—Ä—Ü" in h.lower() and "(–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞)" in h.lower():
                col_map["—Ä—Ü"] = i
            elif "–ø–æ—Å—Ç–∞–≤—â–∏–∫" in h.lower() and "(–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞)" in h.lower():
                col_map["–ø–æ—Å—Ç–∞–≤—â–∏–∫"] = i
            elif "–≤–æ–¥–∏—Ç–µ–ª—å" in h.lower() and "—Ñ–∞–º–∏–ª–∏—è" in h.lower():
                col_map["–≤–æ–¥–∏—Ç–µ–ª—å"] = i
            elif h.lower() == "–Ω–æ–º–µ—Ä –∞–º":
                col_map["—Ç—è–≥–∞—á"] = i

        required = ["–¥–∞—Ç–∞", "—Ä—Ü", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–≤–æ–¥–∏—Ç–µ–ª—å", "—Ç—è–≥–∞—á"]
        if not all(k in col_map for k in required):
            missing = [k for k in required if k not in col_map]
            logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing)}")
            book.close()
            return

        logging.info("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        row_index = 1
        for row in sheet.iter_rows(min_row=2, values_only=True):
            row_index += 1
            cell_date = row[col_map["–¥–∞—Ç–∞"]]
            if cell_date is None:
                continue

            try:
                parsed_date = datetime.strptime(cell_date, "%d.%m.%Y").date() if isinstance(cell_date, str) and "." in cell_date else \
                              datetime.strptime(cell_date, "%Y-%m-%d").date() if isinstance(cell_date, str) else cell_date.date()
            except:
                logging.debug(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_index}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{cell_date}' ‚Äî –ø—Ä–æ–ø—É—Å–∫")
                continue

            rc = str(row[col_map["—Ä—Ü"]]).strip()
            raw_supplier = row[col_map["–ø–æ—Å—Ç–∞–≤—â–∏–∫"]]
            supplier = str(raw_supplier).strip() if raw_supplier is not None else ""
            supplier_lower = supplier.lower()

            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            supplier = ''.join(c for c in supplier if c.isprintable())

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –∏ —Ç—è–≥–∞—á
            raw_driver = row[col_map["–≤–æ–¥–∏—Ç–µ–ª—å"]]
            raw_tractor = row[col_map["—Ç—è–≥–∞—á"]]
            has_driver = bool(raw_driver and str(raw_driver).strip().lower() not in ("", "nan", "none"))
            has_tractor = bool(raw_tractor and str(raw_tractor).strip().lower() not in ("", "nan", "none"))

            logging.debug(f"üìã –°—Ç—Ä–æ–∫–∞ {row_index}: –¥–∞—Ç–∞={parsed_date}, –†–¶={rc}, –ø–æ—Å—Ç–∞–≤—â–∏–∫='{supplier}', –≤–æ–¥–∏—Ç–µ–ª—å={'–¥–∞' if has_driver else '–Ω–µ—Ç'}, —Ç—è–≥–∞—á={'–¥–∞' if has_tractor else '–Ω–µ—Ç'}")

            # === X5 –∏ –î–∏—Å—Ç—Ä—ã: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 12:00 –ø–æ –ú–°–ö –≤ –¥–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞ ===
            if ("x5" in supplier_lower or "—Ö5" in supplier_lower or "–¥–∏—Å—Ç—Ä" in supplier_lower) and today_msk == parsed_date:
                logging.info(f"‚úÖ X5/–î–∏—Å—Ç—Ä—ã: —Å—Ç—Ä–æ–∫–∞ {row_index} –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–∞—Ç–µ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É")
                if TEST_MODE and current_time_msk.hour == TEST_HOUR or (not TEST_MODE and time(12, 0) <= current_time_msk < time(12, 1)):
                    logging.info("‚è∞ –í—Ä–µ–º—è 12:00 (–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ) ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
                    if not (has_driver and has_tractor):
                        key = (parsed_date.isoformat(), rc, "x5_distry_12h")
                        if key not in sent_reminders:
                            net_name = "X5" if "x5" in supplier_lower or "—Ö5" in supplier_lower else "–î–∏—Å—Ç—Ä—ã"
                            subject = f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({net_name}): –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –†–¶ {rc}"
                            body = (
                                f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {parsed_date.strftime('%d.%m.%Y')}\n"
                                f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n"
                                f"–†–¶: {rc}\n\n"
                                f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞.\n"
                                f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                            )
                            # === –í–´–ë–û–† –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô –ü–û –°–ï–¢–ò ===
                            recipients = REMINDER_RECIPIENTS.get("x5" if "x5" in supplier_lower or "—Ö5" in supplier_lower else "–¥–∏—Å—Ç—Ä—ã")
                            send_email(subject, body, recipients)
                            sent_reminders.add(key)
                            logging.info(f"‚úÖ ‚úâÔ∏è –û–¢–ü–†–ê–í–õ–ï–ù–û –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {net_name} –Ω–∞ {recipients} –æ—Ç {SENDER_EMAIL}")
                        else:
                            logging.info(f"‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {supplier} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è")
                    else:
                        logging.info(f"‚ÑπÔ∏è –î–ª—è {supplier} –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ")
                else:
                    logging.info(f"‚è≥ –í—Ä–µ–º—è {current_time_msk} ‚Äî –Ω–µ 12:00 (–∏–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤–æ–µ). –ü—Ä–æ–ø—É—Å–∫.")

            # === –¢–∞–Ω–¥–µ—Ä: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:00 –ø–æ –ú–°–ö –Ω–∞–∫–∞–Ω—É–Ω–µ ===
            elif "—Ç–∞–Ω–¥–µ—Ä" in supplier_lower:
                weekday = parsed_date.weekday()
                if weekday in (5, 6, 0):  # –°–±, –í—Å, –ü–Ω ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ü—Ç
                    days_to_fri = (weekday - 4) % 7
                    if days_to_fri == 0:
                        days_to_fri = 7
                    reminder_date = parsed_date - timedelta(days=days_to_fri)
                    logging.debug(f"üìÖ –¢–∞–Ω–¥–µ—Ä: –≤–æ–∑–≤—Ä–∞—Ç {parsed_date} (–ü–Ω/–°–±/–í—Å) ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {reminder_date} (–ü—Ç)")
                else:
                    reminder_date = parsed_date - timedelta(days=1)
                    logging.debug(f"üìÖ –¢–∞–Ω–¥–µ—Ä: –≤–æ–∑–≤—Ä–∞—Ç {parsed_date} ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–∫–∞–Ω—É–Ω–µ: {reminder_date}")

                if today_msk == reminder_date:
                    logging.info(f"‚úÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –¢–∞–Ω–¥–µ—Ä–∞ (–≤–æ–∑–≤—Ä–∞—Ç {parsed_date}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_date})")
                    if TEST_MODE and current_time_msk.hour == TEST_HOUR or (not TEST_MODE and time(14, 0) <= current_time_msk < time(14, 1)):
                        logging.info("‚è∞ –°–µ–π—á–∞—Å 14:00 (–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ) ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                        if not (has_driver and has_tractor):
                            key = (reminder_date.isoformat(), rc, "tander_14h")
                            if key not in sent_reminders:
                                subject = f"–¢–ê–ù–î–ï–†: —Å—Ä–æ—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –†–¶ {rc}"
                                body = (
                                    f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {parsed_date.strftime('%d.%m.%Y')}\n"
                                    f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n"
                                    f"–†–¶: {rc}\n\n"
                                    f"–î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —Ç—è–≥–∞—á–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ —É—á—ë—Ç–∞.\n"
                                    f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                                )
                                # === –í–´–ë–û–† –ü–û–õ–£–ß–ê–¢–ï–õ–ï–ô –ü–û –°–ï–¢–ò ===
                                recipients = REMINDER_RECIPIENTS["—Ç–∞–Ω–¥–µ—Ä"]
                                send_email(subject, body, recipients)
                                sent_reminders.add(key)
                                logging.info(f"‚úÖ ‚úâÔ∏è –û–¢–ü–†–ê–í–õ–ï–ù–û –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¢–ê–ù–î–ï–† –Ω–∞ {recipients} –æ—Ç {SENDER_EMAIL}")
                            else:
                                logging.info("‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¢–∞–Ω–¥–µ—Ä–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è")
                        else:
                            logging.info("‚ÑπÔ∏è –î–ª—è –¢–∞–Ω–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    else:
                        logging.info(f"‚è≥ –í—Ä–µ–º—è {current_time_msk} ‚Äî –Ω–µ –≤ –æ–∫–Ω–µ 14:00 (–∏–ª–∏ –Ω–µ —Ç–µ—Å—Ç–æ–≤–æ–µ). –ü—Ä–æ–ø—É—Å–∫.")
                else:
                    logging.debug(f"üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¢–∞–Ω–¥–µ—Ä–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è (–æ–∂–∏–¥–∞–µ—Ç—Å—è {reminder_date})")

        book.close()
        logging.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ç–∞–±–ª–∏—Ü–µ")

    except Exception as e:
        logging.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ check_reminders_from_table: {e}", exc_info=True)


# === –ó–∞–ø–∏—Å—å –≤ Excel ===
def write_vertical_to_excel(data, sheet_name, excel_file):
    try:
        if not os.path.exists(excel_file):
            wb = Workbook()
            ws = wb.active
            ws.title = sheet_name
            ws.append(["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "EntryID"])
            wb.save(excel_file)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π Excel: {excel_file}")
        else:
            book = load_workbook(excel_file)
            if sheet_name not in book.sheetnames:
                ws = book.create_sheet(sheet_name)
                ws.append(["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "EntryID"])
            else:
                ws = book[sheet_name]
            startrow = ws.max_row + 1
            ws.cell(row=startrow, column=1, value=f"=== –ü–∏—Å—å–º–æ –æ—Ç {data['–î–∞—Ç–∞ –ø–∏—Å—å–º–∞']} ===")
            ws.cell(row=startrow, column=3, value=data["EntryID"])
            startrow += 1
            for k, v in data.items():
                if k == "EntryID": continue
                ws.cell(row=startrow, column=1, value=k)
                ws.cell(row=startrow, column=2, value=v)
                ws.cell(row=startrow, column=3, value=data["EntryID"])
                startrow += 1
            book.save(excel_file)
            logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")


def write_horizontal_to_excel(data, sheet_name, excel_file):
    try:
        df_new = pd.DataFrame([data])
        if not os.path.exists(EXCEL_FILE):
            df_new.to_excel(EXCEL_FILE, sheet_name=sheet_name, index=False)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π Excel: {excel_file}")
        else:
            book = load_workbook(EXCEL_FILE)
            if sheet_name not in book.sheetnames:
                with pd.ExcelWriter(EXCEL_FILE, engine="openpyxl", mode="a") as writer:
                    df_new.to_excel(writer, sheet_name=sheet_name, index=False)
            else:
                startrow = book[SHEET_NAME].max_row
                with pd.ExcelWriter(EXCEL_FILE, engine="openpyxl", mode="a", if_sheet_exists="overlay") as writer:
                    df_new.to_excel(writer, sheet_name=SHEET_NAME, index=False, header=False, startrow=startrow)
            logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")


def handle_mail(item, processed_ids):
    global _processed_ids
    try:
        entry_id = item.EntryID
        subject = item.Subject
        received_time = item.ReceivedTime
        logging.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞: {subject} | ID: {entry_id}")

        if entry_id in processed_ids or is_email_in_excel(entry_id):
            processed_ids.add(entry_id)
            save_processed_ids(processed_ids)
            return

        if not subject or SEARCH_SUBJECT.lower() not in str(subject).lower():
            return

        body = item.Body
        del item

        data = parse_email(body, received_time)
        if not data:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∏—Å—å–º–æ")
            processed_ids.add(entry_id)
            save_processed_ids(processed_ids)
            return

        data["EntryID"] = entry_id
        logging.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {data}")

        target_date = data.get("–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞")
        if not target_date:
            try:
                target_date = datetime.strptime(data.get("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞", "")[:10], "%Y-%m-%d").date()
            except:
                target_date = None

        target_rc = data.get("–†–¶", "").strip()

        if target_date and target_rc:
            update_table_row(data, target_date, target_rc)

        if WRITE_MODE == "vertical":
            write_vertical_to_excel(data, SHEET_NAME, EXCEL_FILE)
        else:
            write_horizontal_to_excel(data, SHEET_NAME, EXCEL_FILE)

        # ‚ùå –ù–ï–¢ –≤—ã–∑–æ–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–¥–µ—Å—å ‚Äî –æ–Ω–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

        processed_ids.add(entry_id)
        save_processed_ids(processed_ids)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
    finally:
        if 'item' in locals():
            del item


def monitor_inbox():
    pythoncom.CoInitialize()
    outlook = namespace = inbox = folder = None

    processed_ids = load_processed_ids()
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_ids)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.")

    try:
        outlook = win32com.client.Dispatch("Outlook.Application")
        namespace = outlook.GetNamespace("MAPI")
        inbox = namespace.GetDefaultFolder(6)
        folder = inbox.Folders[OUTLOOK_FOLDER] if OUTLOOK_FOLDER.lower() != "inbox" else inbox

        logging.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º: {WRITE_MODE.upper()}. –ü–∞–ø–∫–∞: {OUTLOOK_FOLDER}")
        time_module.sleep(5)

        while True:
            try:
                min_date = datetime.today().date() - timedelta(days=7)
                messages = folder.Items
                messages.Sort("[ReceivedTime]", True)

                msg_list = []
                for msg in messages:
                    try:
                        if getattr(msg, 'Class', None) != 43:
                            continue
                        if not getattr(msg, 'ReceivedTime', None):
                            continue
                        if msg.ReceivedTime.date() < min_date:
                            break
                        msg_list.append(msg)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∏—Å—å–º–∞: {e}")

                for msg in msg_list:
                    handle_mail(msg, processed_ids)
                    del msg

                # ‚úÖ –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                check_reminders_from_table()

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

            logging.info("‚è≥ –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥...\n")
            time_module.sleep(60)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Outlook: {e}")
    finally:
        for obj in [folder, inbox, namespace, outlook]:
            if obj:
                del obj
        pythoncom.CoUninitialize()


if __name__ == "__main__":
    try:
        set_console_title("üì¶ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤")
        logging.info("=" * 50)
        logging.info("  üì¶ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–¥–¥–æ–Ω–æ–≤")
        logging.info(f"  üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_CONTACT}")
        logging.info("=" * 50)
        logging.info("")
        monitor_inbox()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è...")
