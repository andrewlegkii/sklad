import win32com.client
import re
import pandas as pd
from openpyxl import load_workbook, Workbook
import os
from datetime import datetime, timedelta
import time
import pythoncom
import sys
import logging

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É (–≥–¥–µ –ª–µ–∂–∏—Ç .exe –∏–ª–∏ .py) ===
def get_base_path():
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))

BASE_PATH = get_base_path()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_file = os.path.join(BASE_PATH, "script.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
OUTLOOK_FOLDER = "Inbox"
SEARCH_SUBJECT = "–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥–¥–æ–Ω–æ–≤ –∏–∑ —Å–µ—Ç–µ–π"
EXCEL_FILE = os.path.join(BASE_PATH, "–≤–æ–∑–≤—Ä–∞—Ç_–ø–æ–¥–¥–æ–Ω–æ–≤.xlsx")
PROCESSED_IDS_FILE = os.path.join(BASE_PATH, "processed_ids.txt")
SHEET_NAME = "–î–∞–Ω–Ω—ã–µ"

WRITE_MODE = "horizontal"

# === –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–∑–∂–µ) ===
# REMINDER_RECIPIENTS = {
#    "x5": ["dma@line7.ru", "slon07@line7.ru", "rudcekb@nestlesoft.net"],
#    "—Ç–∞–Ω–¥–µ—Ä": ["rudcekb@nestlesoft.net"],
#    "–¥–∏—Å—Ç—Ä—ã": ["rudcekb@nestlesoft.net"]
# }

REMINDER_RECIPIENTS = {
    "x5": ["skoppss@yandex.ru"],
    "—Ç–∞–Ω–¥–µ—Ä": ["skoppss@yandex.ru"],
    "–¥–∏—Å—Ç—Ä—ã": ["skoppss@yandex.ru"]
}

# === –°–ª—É–∂–µ–±–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
sent_reminders = set()  # –•—Ä–∞–Ω–∏—Ç (entry_id, —Ç–∏–ø_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)


# === –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –∏–∑ —Ñ–∞–π–ª–∞ ===
def load_processed_ids():
    if not os.path.exists(PROCESSED_IDS_FILE):
        return set()
    try:
        with open(PROCESSED_IDS_FILE, "r", encoding="utf-8") as f:
            return set(line.strip() for line in f if line.strip())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ processed_ids: {e}")
        return set()


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –≤ —Ñ–∞–π–ª ===
def save_processed_ids(ids):
    try:
        with open(PROCESSED_IDS_FILE, "w", encoding="utf-8") as f:
            for item_id in ids:
                f.write(item_id + "\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è processed_ids: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–∏—Å—å–º–æ —É–∂–µ –≤ Excel (–ø–æ EntryID) ===
def is_email_in_excel(entry_id):
    if not os.path.exists(EXCEL_FILE):
        return False
    try:
        df = pd.read_excel(EXCEL_FILE, sheet_name=SHEET_NAME)
        if "EntryID" in df.columns and entry_id in df["EntryID"].values:
            return True
    except Exception as e:
        logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Excel: {e}")
    return False


# === –ü–∞—Ä—Å–∏–Ω–≥ –ø–∏—Å—å–º–∞ ===
def parse_email(body, received_time):
    try:
        lines = body.splitlines()
        data = {
            "–î–∞—Ç–∞ –ø–∏—Å—å–º–∞": received_time.strftime("%Y-%m-%d %H:%M"),
            "–°–µ—Ç—å": "",
            "–†–¶": "",
            "–¢—è–≥–∞—á": "",
            "–ü—Ä–∏—Ü–µ–ø": "",
            "–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è": "",
            "–ü–∞—Å–ø–æ—Ä—Ç": "",
            "–ù–æ–º–µ—Ä –í–£": "",
            "–¢–µ–ª–µ—Ñ–æ–Ω": "",
            "–ò–ù–ù": "",
            "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "",
            "EntryID": ""
        }

        for line in lines:
            line = line.strip()
            if not line:
                continue

            if line.startswith("–°–µ—Ç—å"):
                parts = [p.strip() for p in line.split("|")]
                if len(parts) >= 2:
                    data["–°–µ—Ç—å"] = parts[1]
                if len(parts) >= 3:
                    data["–†–¶"] = parts[2].replace("–†–¶", "").strip()
            elif line.startswith("–¢—è–≥–∞—á"):
                data["–¢—è–≥–∞—á"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ü—Ä–∏—Ü–µ–ø"):
                data["–ü—Ä–∏—Ü–µ–ø"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–§.–ò.–û. –≤–æ–¥–∏—Ç–µ–ª—è"):
                data["–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ü–∞—Å–ø–æ—Ä—Ç"):
                data["–ü–∞—Å–ø–æ—Ä—Ç"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ù–æ–º–µ—Ä –í–£"):
                data["–ù–æ–º–µ—Ä –í–£"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–¢–µ–ª–µ—Ñ–æ–Ω"):
                data["–¢–µ–ª–µ—Ñ–æ–Ω"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–ò–ù–ù"):
                data["–ò–ù–ù"] = line.split(":", 1)[1].strip() if ":" in line else ""
            elif line.startswith("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                data["–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"] = line.split(":", 1)[1].strip() if ":" in line else ""

        return data

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: {e}")
        return None


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
def send_email(subject, body, to, cc=None):
    try:
        outlook_app = win32com.client.Dispatch("Outlook.Application")
        mail = outlook_app.CreateItem(0)
        mail.Subject = subject
        if isinstance(to, list):
            mail.To = ";".join(to)
        else:
            mail.To = to
        if cc:
            mail.CC = cc
        mail.Body = body
        mail.Send()
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subject} -> {to}")
        del mail
        del outlook_app
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å—É ===
def check_and_send_reminders(data, entry_id):
    global sent_reminders

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        network = data.get("–°–µ—Ç—å", "").lower().strip()
        if not network:
            return

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–õ–µ–Ω—Ç–∞" ‚Äî –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
        if "–ª–µ–Ω—Ç–∞" in network:
            logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –õ–µ–Ω—Ç—ã ‚Äî –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞
        return_date_str = data.get("–î–∞—Ç–∞ –ø–∏—Å—å–º–∞", "")[:10]  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ YYYY-MM-DD
        try:
            return_date = datetime.strptime(return_date_str, "%Y-%m-%d").date()
        except:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞: {return_date_str}")
            return

        today = datetime.today().date()
        current_time = datetime.now().strftime("%H:%M")

        # === –õ–æ–≥–∏–∫–∞ –¥–ª—è X5 –∏ –î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ ===
        if "x5" in network or "–¥–∏—Å—Ç—Ä" in network:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 12:00 –≤ –¥–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞
            if today == return_date and current_time == "12:00":
                reminder_key = (entry_id, "due_day_1200")
                if reminder_key not in sent_reminders:
                    subject = f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ({network.upper()}): –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ –†–¶"
                    body = (
                        f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date_str}\n"
                        f"–°–µ—Ç—å: {data.get('–°–µ—Ç—å', '')}\n"
                        f"–†–¶: {data.get('–†–¶', '')}\n\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞.\n"
                        f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                    )
                    recipients = REMINDER_RECIPIENTS.get("x5" if "x5" in network else "–¥–∏—Å—Ç—Ä—ã")
                    send_email(subject, body, recipients)
                    sent_reminders.add(reminder_key)
                    logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {network} –≤ –¥–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞ ‚Üí {recipients}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ ‚Äî —Ä–∞–∑ –≤ —á–∞—Å –≤ –¥–µ–Ω—å –≤–æ–∑–≤—Ä–∞—Ç–∞
            if today == return_date and int(current_time[3:]) == 0:  # –ö–∞–∂–¥—ã–π —á–∞—Å:XX, –≥–¥–µ XX=00
                reminder_key = (entry_id, f"hourly_check_{current_time[:2]}")
                if reminder_key not in sent_reminders:
                    subject = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ({network.upper()}): –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ –†–¶?"
                    body = (
                        f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date_str}\n"
                        f"–°–µ—Ç—å: {data.get('–°–µ—Ç—å', '')}\n"
                        f"–†–¶: {data.get('–†–¶', '')}\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ –†–¶ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
                        f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                    )
                    recipients = REMINDER_RECIPIENTS.get("x5" if "x5" in network else "–¥–∏—Å—Ç—Ä—ã")
                    send_email(subject, body, recipients)
                    sent_reminders.add(reminder_key)
                    logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è {network} ‚Üí {recipients}")

        # === –õ–æ–≥–∏–∫–∞ –¥–ª—è –¢–∞–Ω–¥–µ—Ä ===
        elif "—Ç–∞–Ω–¥–µ—Ä" in network:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–∫–∞–Ω—É–Ω" ‚Äî –¥–µ–Ω—å –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
            due_eve = return_date - timedelta(days=1)

            # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤ –ø—è—Ç–Ω–∏—Ü—É
            if return_date.weekday() == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                due_eve = return_date - timedelta(days=3)

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:00 –≤ –∫–∞–Ω—É–Ω –¥–Ω—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            if today == due_eve and current_time == "14:00":
                reminder_key = (entry_id, "due_eve_1400")
                if reminder_key not in sent_reminders:
                    subject = "üöõ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–¢–ê–ù–î–ï–†): –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ –†–¶"
                    body = (
                        f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date_str}\n"
                        f"–°–µ—Ç—å: {data.get('–°–µ—Ç—å', '')}\n"
                        f"–†–¶: {data.get('–†–¶', '')}\n\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –ù–ê–ö–ê–ù–£–ù–ï –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
                        f"[–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ]"
                    )
                    recipients = REMINDER_RECIPIENTS.get("—Ç–∞–Ω–¥–µ—Ä")
                    send_email(subject, body, recipients)
                    sent_reminders.add(reminder_key)
                    logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –¢–∞–Ω–¥–µ—Ä (–Ω–∞–∫–∞–Ω—É–Ω–µ) ‚Üí {recipients}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# === –ó–∞–ø–∏—Å—å –≤ Excel: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ===
def write_vertical_to_excel(data, sheet_name, excel_file):
    try:
        if not os.path.exists(excel_file):
            wb = Workbook()
            ws = wb.active
            ws.title = sheet_name
            ws.append(["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "EntryID"])
            wb.save(excel_file)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª Excel (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π): {excel_file}")

        book = load_workbook(excel_file)

        if sheet_name not in book.sheetnames:
            ws = book.create_sheet(sheet_name)
            ws.append(["–ö–ª—é—á", "–ó–Ω–∞—á–µ–Ω–∏–µ", "EntryID"])
        else:
            ws = book[sheet_name]

        startrow = ws.max_row + 1

        ws.cell(row=startrow, column=1, value=f"=== –ü–∏—Å—å–º–æ –æ—Ç {data['–î–∞—Ç–∞ –ø–∏—Å—å–º–∞']} ===")
        ws.cell(row=startrow, column=3, value=data["EntryID"])
        startrow += 1

        for key, value in data.items():
            if key == "EntryID":
                continue
            ws.cell(row=startrow, column=1, value=key)
            ws.cell(row=startrow, column=2, value=value)
            ws.cell(row=startrow, column=3, value=data["EntryID"])
            startrow += 1

        book.save(excel_file)
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Excel (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Excel (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ): {e}")


# === –ó–∞–ø–∏—Å—å –≤ Excel: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ===
def write_horizontal_to_excel(data, sheet_name, excel_file):
    try:
        df_new = pd.DataFrame([data])

        if not os.path.exists(EXCEL_FILE):
            df_new.to_excel(excel_file, sheet_name=sheet_name, index=False)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª Excel (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π): {excel_file}")
        else:
            book = load_workbook(excel_file)

            if sheet_name not in book.sheetnames:
                with pd.ExcelWriter(excel_file, engine="openpyxl", mode="a") as writer:
                    df_new.to_excel(writer, sheet_name=sheet_name, index=False)
                logging.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            else:
                startrow = book[sheet_name].max_row
                with pd.ExcelWriter(excel_file, engine="openpyxl", mode="a", if_sheet_exists="overlay") as writer:
                    df_new.to_excel(writer, sheet_name=sheet_name, index=False, header=False, startrow=startrow)
                logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–ø–∏—Å–∞–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Excel (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ): {e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ ===
def handle_mail(item, processed_ids):
    try:
        entry_id = item.EntryID
        subject = item.Subject
        received_time = item.ReceivedTime
        received_time_str = received_time.strftime("%Y-%m-%d %H:%M")

        logging.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å—å–º–∞: {subject} | ID: {entry_id}")

        if entry_id in processed_ids:
            logging.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: —É–∂–µ –≤ processed_ids")
            return

        if is_email_in_excel(entry_id):
            logging.debug("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: —É–∂–µ –µ—Å—Ç—å –≤ Excel")
            processed_ids.add(entry_id)
            save_processed_ids(processed_ids)
            return

        if not subject or SEARCH_SUBJECT.lower() not in str(subject).lower():
            logging.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: —Ç–µ–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '{SEARCH_SUBJECT}' (—Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞: '{subject}')")
            return

        body = item.Body
        del item

        data = parse_email(body, received_time)
        if not data:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∏—Å—å–º–æ")
            processed_ids.add(entry_id)
            save_processed_ids(processed_ids)
            return

        data["EntryID"] = entry_id
        logging.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {data}")

        if WRITE_MODE == "vertical":
            write_vertical_to_excel(data, SHEET_NAME, EXCEL_FILE)
            logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –≤ Excel")
        else:
            write_horizontal_to_excel(data, SHEET_NAME, EXCEL_FILE)
            logging.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –≤ Excel")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å—É
        check_and_send_reminders(data, entry_id)

        processed_ids.add(entry_id)
        save_processed_ids(processed_ids)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
    finally:
        if 'item' in locals():
            del item


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
def monitor_inbox():
    pythoncom.CoInitialize()
    outlook = None
    namespace = None
    inbox = None
    folder = None

    processed_ids = load_processed_ids()
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_ids)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –∏–∑ —Ñ–∞–π–ª–∞.")

    try:
        outlook = win32com.client.Dispatch("Outlook.Application")
        namespace = outlook.GetNamespace("MAPI")
        inbox = namespace.GetDefaultFolder(6)
        folder = inbox.Folders[OUTLOOK_FOLDER] if OUTLOOK_FOLDER.lower() != "inbox" else inbox

        logging.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏: {WRITE_MODE.upper()}.")
        logging.info(f"üìÇ –ü–∞–ø–∫–∞: {OUTLOOK_FOLDER}")
        logging.info(f"üì¨ –ò—â–µ–º –ø–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞): '{SEARCH_SUBJECT}'")

        time.sleep(5)

        while True:
            try:
                today = datetime.today().date()
                min_date = today - timedelta(days=7)  # –°–º–æ—Ç—Ä–∏–º –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é

                messages = folder.Items
                messages.Sort("[ReceivedTime]", True)

                msg_list = []
                logging.info("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∏—Å—å–º–∞...")

                for msg in messages:
                    try:
                        msg_class = getattr(msg, 'Class', None)
                        subject = getattr(msg, 'Subject', '–ë–µ–∑ —Ç–µ–º—ã')
                        received_time = getattr(msg, 'ReceivedTime', None)

                        if msg_class != 43:
                            continue

                        if not received_time:
                            continue

                        if received_time.date() < min_date:
                            break

                        msg_list.append(msg)

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∏—Å—å–º–∞: {e}")
                        continue

                logging.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(msg_list)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

                for msg in msg_list:
                    handle_mail(msg, processed_ids)
                    del msg

                del msg_list

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

            logging.info("‚è≥ –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...\n")
            time.sleep(60)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Outlook: {e}")
    finally:
        for obj in [folder, inbox, namespace, outlook]:
            if obj:
                del obj
        pythoncom.CoUninitialize()


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    try:
        monitor_inbox()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è...")
