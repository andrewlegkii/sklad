import win32com.client
import os
from datetime import datetime, timedelta
import sys
import logging

# === üß™ –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–ê ===
TEST_CURRENT_TIME = "15:00"  # –ú–µ–Ω—è–π –Ω–∞ "12:00", "14:00" –∏ —Ç.–¥.

# –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ email –¥–ª—è —Ç–µ—Å—Ç–∞!
TEST_RECIPIENTS = {
    "x5": ["skoppss@yandex.ru"],
    "—Ç–∞–Ω–¥–µ—Ä": ["koppss@yandex.ru"],
    "–¥–∏—Å—Ç—Ä—ã": ["koppss@yandex.ru"]
}

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
TODAY_STR = datetime.today().strftime("%Y-%m-%d")
TOMORROW_STR = (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d")

TEST_RECORDS = [
    # –¢–µ—Å—Ç –¥–ª—è X5 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 12:00 —Å–µ–≥–æ–¥–Ω—è
    {
        "entry_id": "x5-test",
        "–°–µ—Ç—å": "X5",
        "–†–¶": "–¢—é–º–µ–Ω—å",
        "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞": TODAY_STR
    },
    # –¢–µ—Å—Ç –¥–ª—è –¢–∞–Ω–¥–µ—Ä ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–≤—Ç—Ä–∞ ‚Üí –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ 14:00
    {
        "entry_id": "tander-test",
        "–°–µ—Ç—å": "–¢–∞–Ω–¥–µ—Ä",
        "–†–¶": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
        "–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞": TOMORROW_STR
    }
]

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("test_script.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

sent_reminders = set()


def send_email(subject, body, to):
    try:
        outlook = win32com.client.Dispatch("Outlook.Application")
        mail = outlook.CreateItem(0)
        mail.Subject = subject
        mail.To = to[0] if isinstance(to, list) else to
        mail.Body = body
        mail.Send()
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {subject} ‚Üí {to}")
        del mail, outlook
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


def simulate_reminders():
    global sent_reminders

    today = datetime.today().date()
    current_time = TEST_CURRENT_TIME

    for record in TEST_RECORDS:
        entry_id = record["entry_id"]
        network = record["–°–µ—Ç—å"].lower()
        rc = record["–†–¶"]

        if "–ª–µ–Ω—Ç–∞" in network:
            continue

        try:
            return_date = datetime.strptime(record["–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"], "%Y-%m-%d").date()
        except Exception as e:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞: {e}")
            continue

        # X5 / –î–∏—Å—Ç—Ä—ã
        if "x5" in network or "–¥–∏—Å—Ç—Ä" in network:
            if today == return_date and current_time == "12:00":
                key = (entry_id, "1200")
                if key not in sent_reminders:
                    send_email(
                        f"[–¢–ï–°–¢] X5: –¥–∞–Ω–Ω—ã–µ –Ω–∞ –†–¶ {rc}",
                        f"–î–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n–†–¶: {rc}",
                        TEST_RECIPIENTS["x5"]
                    )
                    sent_reminders.add(key)

        # –¢–∞–Ω–¥–µ—Ä
        elif "—Ç–∞–Ω–¥–µ—Ä" in network:
            if return_date.weekday() in (5, 6, 0):
                days_back = (return_date.weekday() - 4) % 7
                if days_back == 0:
                    days_back = 7
                reminder_date = return_date - timedelta(days=days_back)
            else:
                reminder_date = return_date - timedelta(days=1)

            if today == reminder_date and current_time == "14:00":
                key = (entry_id, "1400_tander")
                if key not in sent_reminders:
                    send_email(
                        f"[–¢–ï–°–¢] –¢–ê–ù–î–ï–†: –¥–∞–Ω–Ω—ã–µ –Ω–∞ –†–¶ {rc}",
                        f"–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n–†–¶: {rc}",
                        TEST_RECIPIENTS["—Ç–∞–Ω–¥–µ—Ä"]
                    )
                    sent_reminders.add(key)


def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞")
    logging.info(f"üïí –¢–µ–∫—É—â–µ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è: {TEST_CURRENT_TIME}")
    logging.info(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {TODAY_STR}")

    simulate_reminders()

    logging.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")


if __name__ == "__main__":
    main()
